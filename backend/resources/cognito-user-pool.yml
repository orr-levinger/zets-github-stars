Resources:
  CognitoUserPool2:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          RequireLowercase: false
          RequireSymbols: false
          MinimumLength: 7
          RequireUppercase: false
          RequireNumbers: false
      UserPoolName: ${self:custom.base}-user-pool
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - phone_number
        - email
  CognitoUserPool2ClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      AllowedOAuthFlows:
        - code
      ClientName: ${self:custom.base}-user-pool-client-web
      UserPoolId: !Ref CognitoUserPool2
      CallbackURLs:
        - http://localhost:3000/
      LogoutURLs:
        - http://localhost:3000/
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
  UserPoolDomain2:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool2
      Domain: ${self:custom.base}-zets-2
  UserPoolUsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: The group for regular app users
      GroupName: Users
      UserPoolId: !Ref CognitoUserPool2
  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    DependsOn:
      - CognitoUserPool2
    Properties:
      Name: CognitoUserPoolAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId:
        Ref: ApiGatewayRestApi
      ProviderARNs:
        - Fn::GetAtt:
            - CognitoUserPool2
            - Arn
